#When you create a dictionary with more than one element format it correctly

programming_dictionary = {
    "Bug": "An error in a program that prevents the program from running as expected.",
    
    123: "A piece of code that you can easily call over and over again.",
    
    "Loop" : "The action of doing something over and over again",

}
#Keys have to be strings otherwise it will try make it a variable and it will not work! Data types are important!!

print(programming_dictionary[123])
print(programming_dictionary["Bug"])

#add to dictionary
programming_dictionary["New Key"] = "Here is a new line in the dictionary"

print(programming_dictionary)

#How to create empty dictionary
empty_dictionary = {}

empty_dictionary["new"] = "new text"

print(empty_dictionary) 

empty_dictionary = {}

print(empty_dictionary)

#Edit a dictionary
programming_dictionary["New Key"] = "This is the new amended key"

print(programming_dictionary)

#Loop through a dictionary 
#It prints the keys! Not the values
for thing in programming_dictionary:
    print(thing)

for key in programming_dictionary:
    print(key)
    print(programming_dictionary[key])


student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}
# ğŸš¨ Don't change the code above ğŸ‘†

#TODO-1: Create an empty dictionary called student_grades.
student_grades = {}

#TODO-2: Write your code below to add the grades to student_grades.ğŸ‘‡
#student_grades["Harry"] = "Exceeds Exp"
#student_grades["Ron"] = "Acceptable"
#student_grades["Hermione"] = "Outstanding"
#student_grades["Draco"] = "Acceptable"
#student_grades["Neville"] = "Unacceptable"

for student in student_scores: #Student is the key
    score = student_scores[student] #The key value
    if score > 90:
        student_grades[student] = "Outstanding"
    elif score > 80:
        student_grades[student] = "Exceed Expectation"
    elif score > 70:
        student_grades[student] = "Acceptable"
    else:
        student_grades[student] = "Failed"

# ğŸš¨ Don't change the code below ğŸ‘‡
print(student_grades)


#Nesting
capitals = {
"France" : "Paris" , 
"Germany" : "Berlin" , 
}

travel_log = {
"France" : {"cities_visited" : ["Paris" , "Lyon"] , "total_visits" : 12} , 
"Germany" : {"cities_visited" : ["German City 1" , "Berlin"] , "total_visits" : 0}
}

#Nesting a dictionary in a List
travel_log_list = [

{"Country" : "France" , "cities_visited" : ["Paris" , "Lyon"] , "total_visits" : 12},

{"Country" : "Germany" , "cities_visited" : ["German City 1" , "Berlin"] , "total_visits" : 0}

]

#-----------------------------

travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]
#ğŸš¨ Do NOT change the code above

#TODO: Write the function that will allow new countries
#to be added to the travel_log. ğŸ‘‡
def add_new_country(country_visited, time_visited, cities_visited):
    new_country = {}
    new_country["country"] = country_visited
    new_country["visits"] = time_visited
    new_country["cities"] = cities_visited
    travel_log.append(new_country)

#ğŸš¨ Do not change the code below
add_new_country("Russia", 2, ["Moscow", "Saint Petersburg"])
print(travel_log)



